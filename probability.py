import sys
from numpy import sign
from math import pi, e, sqrt

class Point:
	def __init__(*coord):
		self.dimension = len(coord)
		self.location = coord

class Gaussian:
	def __init__(self, mean, variance):
		self.mean = mean
		self.variance = variance

def gaussianProbabilityOf(dim, mean, variance, x):
	res = 1
	for index in range(0, dim):
		z1 = ((x[index]-0.5)-mean[index])/(sqrt(variance[index]))
		z2 = ((x[index]+0.5)-mean[index])/(sqrt(variance[index]))
		res = res * (standardNormalCDF(z2)-standardNormalCDF(z1))
	return res

def probabilitiesOfGaussiansGiven(dim, gaussians, points):
	results = {}
	for point in points:
		#print("Calculating probabilities for point " + str(point) + "...")
		results[point] = {}
		px = sum([gaussianProbabilityOf(dim, g[0], g[1], point)*g[2] for g in gaussians])
		#print("\tOverall probability of point: " + str(px) + ".")
		for gaussian in gaussians:
			#print("\tCalculating probability that point was generated by gaussian " + str(gaussian) + "...")
			#print("\t\t(This is where Bayes' Theorem comes in)")
			pxgg = gaussianProbabilityOf(dim, gaussian[0], gaussian[1], point)
			#print("\t\tP(point | gaussian) = " + str(pxgg))
			pg = gaussian[2]
			#print("\t\tP(gaussian) = " + str(pg))
			results[point][gaussian] = (pxgg*pg)/px
			#print("\t\tP(gaussian | point) = P(point | gaussian)*P(gaussian)/P(point) = " + str(results[point][gaussian]))
	return results

def standardNormalCDF(x):
	return (1/2)*(1+(sign(x)*(1-(e**((-2*x**2)/pi)))**(1/2)))

def recalculateGaussian(dim, points, prob):
	mean = [sum([point[x]*probability for point, probability in points.items()])/sum(points.values()) for x in range(dim)]
	var = [(sum([(abs(point[x]-mean[x]))*probability for point, probability in points.items()])/sum(points.values()))**2 for x in range(dim)]
	#var = []
	#for x in range(dim):
	#xvar = 0
	#	for point, probability in points.items():
	#		xvar += (point[x]-mean[x])*probability
	#	xvar /= sum(points.values())
	#	var.append(xvar**2)
	return (tuple(mean), tuple(var), prob)

def main(argv):
	gaussians = [((1,), (20,), 0.5), ((2,), (20,), 0.5)]
	for x in range(100):
		points = [(20,),(18,),(24,),(21,),(16,),(30,),(35,),(32,),(33,),(32,),(29,),(34,),(26,),(19,),(36,)]
		probabilities = probabilitiesOfGaussiansGiven(1, gaussians, points)
		gaussians = [recalculateGaussian(1, {point: probs[gaussian] for point, probs in probabilities.items()}, gaussian[2]) for gaussian in gaussians]
		print(gaussians)

if __name__ == "__main__":
	main(sys.argv)
